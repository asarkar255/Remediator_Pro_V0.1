ABAP Syntax Remediation Rules
================================

Rule 1 — Replace SELECT SINGLE * with explicit field list
---------------------------------------------------------
What to do:
- Change `SELECT SINGLE * FROM ...` to `SELECT SINGLE <field_list> FROM ...`.
- Prefer `SELECT SINGLE` over `SELECT ... UP TO 1 ROWS` when fetching one row by (full) key.

Why:
- Safer, clearer, avoids pulling unused columns and keeps result structure stable.

Examples:
Before:
  SELECT SINGLE * FROM mara WHERE matnr = lv_matnr INTO wa_mara.
After:
  SELECT SINGLE matnr meins mtart FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Before (anti-pattern):
  SELECT * FROM mara INTO wa_mara
         WHERE matnr = lv_matnr
         UP TO 1 ROWS.
  ENDSELECT.
After:
  SELECT SINGLE matnr meins mtart FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Rule 2 — Do not declare AFLE amount variables as TYPE p LENGTH 23 DECIMALS 2
----------------------------------------------------------------------------

What to do:
- For AFLE amount fields, do not use TYPE p LENGTH 23 DECIMALS 2 (invalid: P length max is 16).
- Use the DDIC amount element (e.g., DMBTR) always for AFLE amount variables.

Why:
- ABAP TYPE p length is bytes (1..16), not digits. LENGTH 23 is invalid.
- Using DDIC amount types (e.g., DMBTR) aligns with AFLE-compliant precision/scale and DB mappings.

Examples:
Before (wrong):
  DATA lv_amount TYPE p LENGTH 23 DECIMALS 2.   " WRONG: P length > 16 bytes
After (correct):
  DATA lv_amount TYPE dmbtr.                    " Added By PwcYYYY-MM-DD

Rule 3 — Do NOT add ORDER BY to SELECT SINGLE
---------------------------------------------

What to do:
- Do **not** append any `ORDER BY` clause to `SELECT SINGLE`.
- If you fetch one row **by full primary key**, use `SELECT SINGLE ... WHERE <full key>`.
- If you truly need the “top” row by a sort criterion, use:
  - an aggregate (e.g., MIN/MAX) when possible, **or**
  - `SELECT <field_list> FROM ... WHERE ... ORDER BY ... UP TO 1 ROWS.`

Why:
- `SELECT SINGLE` is intended for key-based, deterministic access; adding `ORDER BY` is semantically wrong and misleading.
- For ordered picks, use explicit `ORDER BY ... UP TO 1 ROWS` (and a field list), or an aggregate for clarity and performance.

Examples:
Before (anti-pattern):
  SELECT SINGLE * FROM mara
         WHERE matnr = lv_matnr
         ORDER BY ersda DESC
         INTO wa_mara.

After (key-based, deterministic):
  SELECT SINGLE matnr meins mtart ersda FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

After (ordered top-1 by a criterion):
  SELECT matnr meins mtart ersda FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr LIKE lv_mat_pattern
         ORDER BY ersda DESC
         UP TO 1 ROWS.  " Added By PwcYYYY-MM-DD

Rule 4 — Comma-separated field lists: escape INTO/WHERE with @, ORDER BY uses commas
-----------------------------------------------------------------------------------

What to do:
- When you list fields in `SELECT` or `SELECT SINGLE` separated by commas, you must:
  - Escape host variables in the `INTO` clause with `@`.
  - Escape host variables in the `WHERE` clause with `@`.
  - Separate fields in the `ORDER BY` clause with commas.
- Do not leave `ORDER BY` fields space-separated when commas are used in the field list.

Why:
- Modern ABAP SQL syntax requires `@` escaping when host variables are used together with comma-separated field lists.
- Ensures consistency, avoids ambiguous parsing, and enforces correct Open SQL syntax.

Examples:
Before:
  SELECT *
         INTO TABLE lt_data
         WHERE matnr IN s_matnr
         ORDER BY ersda DESC.

After (wrong):
  SELECT matnr, meins, mtart FROM mara
         INTO TABLE lt_data
         WHERE matnr IN s_matnr
         ORDER BY ersda mtart DESC.  " Added By PwcYYYY-MM-DD

After (correct):
  SELECT matnr, meins, mtart FROM mara
         INTO TABLE @lt_data
         WHERE matnr IN @s_matnr
         ORDER BY ersda, mtart DESC.  " Added By PwcYYYY-MM-DD

Rule 5 — Replace SELECT on KONV table with SELECT on V_KONV CDS View
-----------------------------------------------------------------------------------
What to do:
-Replace any SELECT ... FROM konv with SELECT ... FROM v_konv.
-Adapt field names and structures as required, because the view may differ from the table.
-Always select only the fields needed.

Examples:
Before:
	SELECT * FROM konv WHERE knumv = lv_knumv INTO TABLE lt_konv.

After:
	SELECT kschl kbetr waers FROM v_konv
       INTO TABLE lt_konv
       WHERE knumv = lv_knumv.  " Added By PwcYYYY-MM-DD

Rule 6 — Replace SELECT on MARC table with SELECT on NSDM_V_MARC View
-----------------------------------------------------------------------------------
What to do:
-Change all SELECT ... FROM marc queries to select from nsdm_v_marc.
-Use an explicit field list to select only required columns.
-NSDM_V_MARC is the S/4HANA-compliant CDS view replacing table access.

Examples:
Before:
	SELECT * FROM marc WHERE matnr = lv_matnr INTO wa_marc.

After:
	SELECT matnr werks dispo FROM nsdm_v_marc
       INTO CORRESPONDING FIELDS OF wa_marc
       WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Rule 7 — Replace SELECT on MARD table with SELECT on NSDM_V_MARD View
-----------------------------------------------------------------------------------
What to do:
-Update SELECT ... FROM mard statements to use nsdm_v_mard instead.
-List necessary fields explicitly instead of using *.
-Perform adjustments for field mapping, if required.

Examples:
Before:
	SELECT * FROM mard WHERE matnr = lv_matnr INTO lt_mard.

After:
	SELECT matnr werks lgort labst FROM nsdm_v_mard
       INTO TABLE lt_mard
       WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-


Rule 8 — Do not use DESCRIBE FIELD/TABLE/LINES; use strlen( ) function instead.
-----------------------------------------------------------------------------------
What to do:
-Replace any use of DESCRIBE FIELD ... LENGTH, DESCRIBE TABLE ... LINES, or other DESCRIBE statements that attempt to determine the length of a string or the number of entries, with safer and more dynamic alternatives.
-For string length, use the standard ABAP function strlen( ) to determine the actual runtime length.
-For table lines, use the built-in function lines( ).

Examples:
Before (Detecting String Length):
  DESCRIBE FIELD lv_matnr LENGTH lv_len.
    IF lv_len = 18.
      " ... some logic ...
    ENDIF.

After (Correct Usage with strlen):
	IF strlen( lv_matnr ) = 18.
    " ... some logic ...
  ENDIF.   " Added By PwcYYYY-MM-DD

Before (Counting Internal Table Lines):
  DESCRIBE TABLE lt_matnr LINES lv_lines.
  IF lv_lines > 0.
    " ... some logic ...
  ENDIF.

After (Correct Usage with lines( )):
  IF lines( lt_matnr ) > 0.
    " ... some logic ...
  ENDIF.   " Added By PwcYYYY-MM-DD

Rule 9 — Do Not Use CONCATENATE for Simple String Assembly; Use String Templates Instead.
-----------------------------------------------------------------------------------
What to do:
-Replace any use of the CONCATENATE statement for string assembly with ABAP string templates (|...|) and string expressions.
-String templates provide clearer syntax, better readability, and reduce the risk of errors with separators.

Examples:
-Before (Using CONCATENATE Statement):
  CONCATENATE 'Material Type' wa_mat-mtype 'material code' wa_matnr-mcode ' Material Number' wa_matnr-matnr INTO lv_msg SEPARATED BY space.

-After (Correct Usage with String Template):
  lv_msg = |{ 'Material Type' && wa_mat-mtype && 'material code' && wa_matnr-mcode && ' Material Number' && wa_matnr-matnr }|.  " Added By PwcYYYY-MM-DD

Examples:
-Before (Using CONCATENATE to Join Fields with Hyphen):
  CONCATENATE wa_header-docnum wa_header-bukrs wa_header-gjahr INTO lv_key SEPARATED BY '-'.

-After (Correct Usage with String Template):
  lv_key = |{ wa_header-docnum }-{ wa_header-bukrs }-{ wa_header-gjahr }|.  " Added By PwcYYYY-MM-DD

Rule 10 — Do Not Use Classic Offset/Length Notation (var+off(len)); Use substring( ) Instead
-------------------------------------------------------------------------------------------
- What to do:
  * Replace any use of the classic ABAP offset/length substring notation (`variable+offset(length)`) with the modern `substring( )` function.
  * Always declare an intermediate CHAR variable of the correct length to store the substring result before comparisons, WHERE conditions, or logic.

- Why:
  * `var+off(len)` is considered legacy and harder to maintain.
  * `substring( )` provides explicit parameters (val, off, len), improving readability and preventing subtle bugs.

Examples:
Before:
  IF wa-matnr+2(3) NE wa-ummat+4(3).
    " ... logic ...
  ENDIF.

After:
  DATA lv_wa_matnr TYPE char3.    " Added By PwcYYYY-MM-DD
  DATA lv_wa_ummat TYPE char3.    " Added By PwcYYYY-MM-DD

  lv_wa_matnr = substring( val = wa_matnr off = 2 len = 3 ).
  lv_wa_ummat = substring( val = wa_ummat off = 4 len = 3 ).

  IF lv_wa_matnr NE lv_wa_ummat.
    " ... logic ...
  ENDIF.

Before (in WHERE clause):
  SELECT matnr ummat FROM mara INTO TABLE lt_mara WHERE ummat = ls_mara-ummat+2(5).

After:
  DATA lv_ls_ummat TYPE char5.       " Added By PwcYYYY-MM-DD
  lv_ls_ummat = substring( val = ls_mara-ummat off = 2 len = 5 ).

  SELECT matnr ummat FROM mara INTO TABLE lt_mara WHERE ummat = lv_ls_ummat.  " Added By PwcYYYY-MM-DD
  
  ABAP Syntax Remediation Rules — Remove Subqueries by Splitting into Separate Queries
============================================================================================

Scope
-----
These rules target ABAP Open SQL patterns that use (or attempt to use) subqueries, e.g.:
- IN ( SELECT ... )
- EXISTS ( SELECT ... )
- Scalar subqueries in the WHERE/SELECT list (not supported in ECC Open SQL)
- Correlated subqueries
The goal is to replace them with separate, ECC-safe statements that are clear, performant, and testable.

General Principles
------------------
- Prefer **JOIN** when a single result set is needed and the relationship is straightforward.
- When JOIN is not feasible (e.g., need a value list), split into **two steps**:
  1) Select the driving values into an internal table.
  2) Use **FOR ALL ENTRIES IN** (FAE) to filter the main query.
- Always guard FAE with `IF it[] IS NOT INITIAL.` and **deduplicate** keys before FAE.
- Avoid nested SELECTs inside loops; use set-based statements.
- Use explicit field lists (no SELECT *).  Keep ECC-safe syntax (no @, no inline DATA for ECC).
- Add `" Added By PwcYYYY-MM-DD` to each changed/added line in examples.

Rule 11 — Replace IN (SELECT …) with FAE (two-step)
--------------------------------------------------
Before (subquery):
  SELECT * FROM vbak
         INTO TABLE lt_vbak
         WHERE vkorg = p_vkorg
           AND vbeln IN ( SELECT vbeln FROM vbap WHERE matnr = p_matnr ).

After (split into two steps, ECC-safe):
  DATA: lt_vbap_keys TYPE STANDARD TABLE OF vbap-vbeln WITH DEFAULT KEY.              " Added By PwcYYYY-MM-DD
  SELECT vbeln FROM vbap INTO TABLE lt_vbap_keys WHERE matnr = p_matnr.               " Added By PwcYYYY-MM-DD
  DELETE ADJACENT DUPLICATES FROM lt_vbap_keys.                                       " Added By PwcYYYY-MM-DD
  IF lt_vbap_keys[] IS NOT INITIAL.                                                   " Added By PwcYYYY-MM-DD
    SELECT vbeln vkorg erdat FROM vbak                                                " Added By PwcYYYY-MM-DD
      INTO TABLE lt_vbak                                                              " Added By PwcYYYY-MM-DD
      FOR ALL ENTRIES IN lt_vbap_keys                                                 " Added By PwcYYYY-MM-DD
      WHERE vkorg = p_vkorg AND vbeln = lt_vbap_keys-table_line.                      " Added By PwcYYYY-MM-DD
  ENDIF.                                                                              " Added By PwcYYYY-MM-DD

Notes:
- Use the single-field table type `TABLE OF vbap-vbeln` for memory efficiency.
- `table_line` is ECC-safe for elementary table types; otherwise reference the component name.
- Always deduplicate key table to reduce DB load.

Rule 12 — Replace EXISTS(SELECT …) with prebuilt key list + FAE
--------------------------------------------------------------
Before (subquery EXISTS):
  SELECT * FROM ekko INTO TABLE lt_ekko
   WHERE bukrs = p_bukrs
     AND EXISTS ( SELECT * FROM ekpo WHERE ekpo~ebeln = ekko~ebeln AND matnr = p_matnr ).

After (split):
  DATA: lt_ekpo_keys TYPE STANDARD TABLE OF ekpo-ebeln WITH DEFAULT KEY.              " Added By PwcYYYY-MM-DD
  SELECT ebeln FROM ekpo INTO TABLE lt_ekpo_keys WHERE matnr = p_matnr.               " Added By PwcYYYY-MM-DD
  DELETE ADJACENT DUPLICATES FROM lt_ekpo_keys.                                       " Added By PwcYYYY-MM-DD
  IF lt_ekpo_keys[] IS NOT INITIAL.                                                   " Added By PwcYYYY-MM-DD
    SELECT ebeln bukrs bedat FROM ekko                                                " Added By PwcYYYY-MM-DD
      INTO TABLE lt_ekko                                                              " Added By PwcYYYY-MM-DD
      FOR ALL ENTRIES IN lt_ekpo_keys                                                 " Added By PwcYYYY-MM-DD
      WHERE bukrs = p_bukrs AND ebeln = lt_ekpo_keys-table_line.                      " Added By PwcYYYY-MM-DD
  ENDIF.                                                                              " Added By PwcYYYY-MM-DD

Rule 13 — Replace scalar subquery in WHERE with temp variable
------------------------------------------------------------
Pattern (not supported in ECC Open SQL):
  SELECT * FROM mara INTO TABLE lt_mara
   WHERE mtart = ( SELECT mtart FROM marc WHERE matnr = mara~matnr AND werks = p_werks ).

Refactor (JOIN preferred if 1:1; else split):
  "* Option A: INNER JOIN when 1:1 per key                                                 " Added By PwcYYYY-MM-DD
  SELECT a~matnr a~mtart b~werks                                                            " Added By PwcYYYY-MM-DD
    FROM mara AS a INNER JOIN marc AS b ON b~matnr = a~matnr AND b~werks = p_werks          " Added By PwcYYYY-MM-DD
    INTO TABLE lt_result                                                                     " Added By PwcYYYY-MM-DD
    WHERE a~mtart = b~mtart.                                                                 " Added By PwcYYYY-MM-DD

  "* Option B: Split when join would multiply rows                                          " Added By PwcYYYY-MM-DD
  DATA: lt_marc_keys TYPE STANDARD TABLE OF marc-mtart WITH DEFAULT KEY.                    " Added By PwcYYYY-MM-DD
  SELECT mtart FROM marc INTO TABLE lt_marc_keys WHERE werks = p_werks.                     " Added By PwcYYYY-MM-DD
  DELETE ADJACENT DUPLICATES FROM lt_marc_keys.                                             " Added By PwcYYYY-MM-DD
  IF lt_marc_keys[] IS NOT INITIAL.                                                         " Added By PwcYYYY-MM-DD
    SELECT matnr mtart FROM mara INTO TABLE lt_mara                                         " Added By PwcYYYY-MM-DD
      FOR ALL ENTRIES IN lt_marc_keys                                                       " Added By PwcYYYY-MM-DD
      WHERE mtart = lt_marc_keys-table_line.                                                " Added By PwcYYYY-MM-DD
  ENDIF.                                                                                    " Added By PwcYYYY-MM-DD

Rule 14 — Replace correlated subqueries with JOIN or staged selects
------------------------------------------------------------------
Before (correlated subquery):
  SELECT * FROM kna1 INTO TABLE lt_kna1
   WHERE land1 = ( SELECT land1 FROM t001 WHERE t001~bukrs = kna1~kunnr(4) ).

After (JOIN or staged key):
  "* If relationship is deterministic and joinable                                          " Added By PwcYYYY-MM-DD
  SELECT a~kunnr a~name1 b~land1                                                            " Added By PwcYYYY-MM-DD
    FROM kna1 AS a INNER JOIN t001 AS b ON b~bukrs = a~kunnr(4)                              " Added By PwcYYYY-MM-DD
    INTO TABLE lt_kna1.                                                                      " Added By PwcYYYY-MM-DD

  "* If join not desired, split                                                              " Added By PwcYYYY-MM-DD
  DATA: lt_bukrs TYPE STANDARD TABLE OF t001-bukrs WITH DEFAULT KEY.                        " Added By PwcYYYY-MM-DD
  "* Build bukrs keys from customers (derive a~kunnr(4) in ABAP if needed)                   " Added By PwcYYYY-MM-DD
  LOOP AT lt_kna1 ASSIGNING <ls>.                                                             " Added By PwcYYYY-MM-DD
    APPEND <ls>-kunnr(4) TO lt_bukrs.                                                         " Added By PwcYYYY-MM-DD
  ENDLOOP.                                                                                   " Added By PwcYYYY-MM-DD
  DELETE ADJACENT DUPLICATES FROM lt_bukrs.                                                  " Added By PwcYYYY-MM-DD
  IF lt_bukrs[] IS NOT INITIAL.                                                              " Added By PwcYYYY-MM-DD
    SELECT bukrs land1 FROM t001 INTO TABLE lt_t001                                          " Added By PwcYYYY-MM-DD
      FOR ALL ENTRIES IN lt_bukrs WHERE bukrs = lt_bukrs-table_line.                         " Added By PwcYYYY-MM-DD
  ENDIF.                                                                                     " Added By PwcYYYY-MM-DD

Rule 15 — Guardrails for FOR ALL ENTRIES (FAE)
---------------------------------------------
- Always check `IF it[] IS NOT INITIAL.` before FAE to avoid full table scan.
- Deduplicate the driving table: `DELETE ADJACENT DUPLICATES FROM it.`
- Ensure the driving table has only the columns used in the `WHERE` equality predicates.
- Prefer equality conditions (`=`) for FAE; range/IN on the right side is not supported.
- Be mindful of NULL semantics: FAE skips rows where the driving fields are initial.
- Use package size for very large result sets and consider secondary indices.

Rule 16 — Replace SELECT list subqueries with prefetch + READ TABLE
------------------------------------------------------------------
Before (pseudo-scalar in field list):
  " Not supported in ECC Open SQL
  SELECT matnr,
         ( SELECT maktg FROM makt WHERE makt~matnr = mara~matnr AND spras = sy-langu ) AS maktg
    FROM mara INTO TABLE lt_out.

After (prefetch + read):
  DATA: lt_mara TYPE TABLE OF mara,                                                          " Added By PwcYYYY-MM-DD
        lt_makt TYPE TABLE OF makt,                                                          " Added By PwcYYYY-MM-DD
        ls_makt TYPE makt.                                                                   " Added By PwcYYYY-MM-DD
  SELECT matnr FROM mara INTO TABLE lt_mara.                                                 " Added By PwcYYYY-MM-DD
  IF lt_mara[] IS NOT INITIAL.                                                               " Added By PwcYYYY-MM-DD
    SELECT matnr maktg FROM makt INTO TABLE lt_makt WHERE spras = sy-langu.                  " Added By PwcYYYY-MM-DD
    SORT lt_makt BY matnr.                                                                   " Added By PwcYYYY-MM-DD
    LOOP AT lt_mara ASSIGNING <ls_mara>.                                                     " Added By PwcYYYY-MM-DD
      READ TABLE lt_makt INTO ls_makt WITH KEY matnr = <ls_mara>-matnr BINARY SEARCH.        " Added By PwcYYYY-MM-DD
      IF sy-subrc = 0.                                                                       " Added By PwcYYYY-MM-DD
        "* combine into output row as needed                                                 " Added By PwcYYYY-MM-DD
      ENDIF.                                                                                 " Added By PwcYYYY-MM-DD
    ENDLOOP.                                                                                 " Added By PwcYYYY-MM-DD
  ENDIF.                                                                                     " Added By PwcYYYY-MM-DD

Rule 17 — Prefer JOIN when it preserves row cardinality and clarity
------------------------------------------------------------------
- Use INNER/LEFT OUTER JOIN in a single SELECT when: 
  * the join keys are known and indexed,
  * the result cardinality is acceptable (no row explosion), and
  * you need columns from both tables together.
- When JOIN introduces duplicates or business logic is staged, use split + FAE instead.

Performance & Correctness Checklist
-----------------------------------
- Field lists only (no SELECT *). Ensure alignment with target structures.
- Check secondary indices for both steps to avoid full scans.
- Avoid SELECT … ENDSELECT with nested reads; use INTO TABLE + further processing.
- For massive key lists, consider batching or buffering.
- Unit test the refactor: results (set & counts) must match the original intent.

