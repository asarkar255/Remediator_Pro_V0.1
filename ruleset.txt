ABAP Syntax Remediation Rules
================================

Rule 1 — Replace SELECT SINGLE * with explicit field list
---------------------------------------------------------
What to do:
- Change `SELECT SINGLE * FROM ...` to `SELECT SINGLE <field_list> FROM ...`.
- Prefer `SELECT SINGLE` over `SELECT ... UP TO 1 ROWS` when fetching one row by (full) key.

Why:
- Safer, clearer, avoids pulling unused columns and keeps result structure stable.

Examples:
Before:
  SELECT SINGLE * FROM mara WHERE matnr = lv_matnr INTO wa_mara.
After:
  SELECT SINGLE matnr meins mtart FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Before (anti-pattern):
  SELECT * FROM mara INTO wa_mara
         WHERE matnr = lv_matnr
         UP TO 1 ROWS.
  ENDSELECT.
After:
  SELECT SINGLE matnr meins mtart FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Rule 2 — Do not declare AFLE amount variables as TYPE p LENGTH 23 DECIMALS 2
----------------------------------------------------------------------------

What to do:
- For AFLE amount fields, do not use TYPE p LENGTH 23 DECIMALS 2 (invalid: P length max is 16).
- Use the DDIC amount element (e.g., DMBTR) always for AFLE amount variables.

Why:
- ABAP TYPE p length is bytes (1..16), not digits. LENGTH 23 is invalid.
- Using DDIC amount types (e.g., DMBTR) aligns with AFLE-compliant precision/scale and DB mappings.

Examples:
Before (wrong):
  DATA lv_amount TYPE p LENGTH 23 DECIMALS 2.   " WRONG: P length > 16 bytes
After (correct):
  DATA lv_amount TYPE dmbtr.                    " Added By PwcYYYY-MM-DD

Rule 3 — Do NOT add ORDER BY to SELECT SINGLE
---------------------------------------------

What to do:
- Do **not** append any `ORDER BY` clause to `SELECT SINGLE`.
- If you fetch one row **by full primary key**, use `SELECT SINGLE ... WHERE <full key>`.
- If you truly need the “top” row by a sort criterion, use:
  - an aggregate (e.g., MIN/MAX) when possible, **or**
  - `SELECT <field_list> FROM ... WHERE ... ORDER BY ... UP TO 1 ROWS.`

Why:
- `SELECT SINGLE` is intended for key-based, deterministic access; adding `ORDER BY` is semantically wrong and misleading.
- For ordered picks, use explicit `ORDER BY ... UP TO 1 ROWS` (and a field list), or an aggregate for clarity and performance.

Examples:
Before (anti-pattern):
  SELECT SINGLE * FROM mara
         WHERE matnr = lv_matnr
         ORDER BY ersda DESC
         INTO wa_mara.

After (key-based, deterministic):
  SELECT SINGLE matnr meins mtart ersda FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

After (ordered top-1 by a criterion):
  SELECT matnr meins mtart ersda FROM mara
         INTO CORRESPONDING FIELDS OF wa_mara
         WHERE matnr LIKE lv_mat_pattern
         ORDER BY ersda DESC
         UP TO 1 ROWS.  " Added By PwcYYYY-MM-DD

Rule 4 — Comma-separated field lists: escape INTO/WHERE with @, ORDER BY uses commas
-----------------------------------------------------------------------------------

What to do:
- When you list fields in `SELECT` or `SELECT SINGLE` separated by commas, you must:
  - Escape host variables in the `INTO` clause with `@`.
  - Escape host variables in the `WHERE` clause with `@`.
  - Separate fields in the `ORDER BY` clause with commas.
- Do not leave `ORDER BY` fields space-separated when commas are used in the field list.

Why:
- Modern ABAP SQL syntax requires `@` escaping when host variables are used together with comma-separated field lists.
- Ensures consistency, avoids ambiguous parsing, and enforces correct Open SQL syntax.

Examples:
Before:
  SELECT *
         INTO TABLE lt_data
         WHERE matnr IN s_matnr
         ORDER BY ersda DESC.

After (wrong):
  SELECT matnr, meins, mtart FROM mara
         INTO TABLE lt_data
         WHERE matnr IN s_matnr
         ORDER BY ersda mtart DESC.  " Added By PwcYYYY-MM-DD

After (correct):
  SELECT matnr, meins, mtart FROM mara
         INTO TABLE @lt_data
         WHERE matnr IN @s_matnr
         ORDER BY ersda, mtart DESC.  " Added By PwcYYYY-MM-DD

Rule 5 — Replace SELECT on KONV table with SELECT on V_KONV CDS View
-----------------------------------------------------------------------------------
What to do:
-Replace any SELECT ... FROM konv with SELECT ... FROM v_konv.
-Adapt field names and structures as required, because the view may differ from the table.
-Always select only the fields needed.

Examples:
Before:
	SELECT * FROM konv WHERE knumv = lv_knumv INTO TABLE lt_konv.

After:
	SELECT kschl kbetr waers FROM v_konv
       INTO TABLE lt_konv
       WHERE knumv = lv_knumv.  " Added By PwcYYYY-MM-DD

Rule 6 — Replace SELECT on MARC table with SELECT on NSDM_V_MARC View
-----------------------------------------------------------------------------------
What to do:
-Change all SELECT ... FROM marc queries to select from nsdm_v_marc.
-Use an explicit field list to select only required columns.
-NSDM_V_MARC is the S/4HANA-compliant CDS view replacing table access.

Examples:
Before:
	SELECT * FROM marc WHERE matnr = lv_matnr INTO wa_marc.

After:
	SELECT matnr werks dispo FROM nsdm_v_marc
       INTO CORRESPONDING FIELDS OF wa_marc
       WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-DD

Rule 7 — Replace SELECT on MARD table with SELECT on NSDM_V_MARD View
-----------------------------------------------------------------------------------
What to do:
-Update SELECT ... FROM mard statements to use nsdm_v_mard instead.
-List necessary fields explicitly instead of using *.
-Perform adjustments for field mapping, if required.

Examples:
Before:
	SELECT * FROM mard WHERE matnr = lv_matnr INTO lt_mard.

After:
	SELECT matnr werks lgort labst FROM nsdm_v_mard
       INTO TABLE lt_mard
       WHERE matnr = lv_matnr.  " Added By PwcYYYY-MM-


Rule 8 — Do not use DESCRIBE FIELD/TABLE/LINES; use strlen( ) function instead.
-----------------------------------------------------------------------------------
What to do:
-Replace any use of DESCRIBE FIELD ... LENGTH, DESCRIBE TABLE ... LINES, or other DESCRIBE statements that attempt to determine the length of a string or the number of entries, with safer and more dynamic alternatives.
-For string length, use the standard ABAP function strlen( ) to determine the actual runtime length.
-For table lines, use the built-in function lines( ).

Examples:
Before (Detecting String Length):
  DESCRIBE FIELD lv_matnr LENGTH lv_len.
    IF lv_len = 18.
      " ... some logic ...
    ENDIF.

After (Correct Usage with strlen):
	IF strlen( lv_matnr ) = 18.
    " ... some logic ...
  ENDIF.   " Added By PwcYYYY-MM-DD

Before (Counting Internal Table Lines):
  DESCRIBE TABLE lt_matnr LINES lv_lines.
  IF lv_lines > 0.
    " ... some logic ...
  ENDIF.

After (Correct Usage with lines( )):
  IF lines( lt_matnr ) > 0.
    " ... some logic ...
  ENDIF.   " Added By PwcYYYY-MM-DD

Rule 9 — Do Not Use CONCATENATE for Simple String Assembly; Use String Templates Instead.
-----------------------------------------------------------------------------------
What to do:
-Replace any use of the CONCATENATE statement for string assembly with ABAP string templates (|...|) and string expressions.
-String templates provide clearer syntax, better readability, and reduce the risk of errors with separators.

Examples:
-Before (Using CONCATENATE Statement):
  CONCATENATE 'Material Type' wa_mat-mtype 'material code' wa_matnr-mcode ' Material Number' wa_matnr-matnr INTO lv_msg SEPARATED BY space.

-After (Correct Usage with String Template):
  lv_msg = |{ 'Material Type' && wa_mat-mtype && 'material code' && wa_matnr-mcode && ' Material Number' && wa_matnr-matnr }|.  " Added By PwcYYYY-MM-DD

Examples:
-Before (Using CONCATENATE to Join Fields with Hyphen):
  CONCATENATE wa_header-docnum wa_header-bukrs wa_header-gjahr INTO lv_key SEPARATED BY '-'.

-After (Correct Usage with String Template):
  lv_key = |{ wa_header-docnum }-{ wa_header-bukrs }-{ wa_header-gjahr }|.  " Added By PwcYYYY-MM-DD

Rule 10 — Do Not Use Classic Offset/Length Notation (var+off(len)); Use substring( ) Instead
-------------------------------------------------------------------------------------------
- What to do:
  * Replace any use of the classic ABAP offset/length substring notation (`variable+offset(length)`) with the modern `substring( )` function.
  * Always declare an intermediate CHAR variable of the correct length to store the substring result before comparisons, WHERE conditions, or logic.

- Why:
  * `var+off(len)` is considered legacy and harder to maintain.
  * `substring( )` provides explicit parameters (val, off, len), improving readability and preventing subtle bugs.

Examples:
Before:
  IF wa-matnr+2(3) NE wa-ummat+4(3).
    " ... logic ...
  ENDIF.

After:
  DATA lv_wa_matnr TYPE char3.    " Added By PwcYYYY-MM-DD
  DATA lv_wa_ummat TYPE char3.    " Added By PwcYYYY-MM-DD

  lv_wa_matnr = substring( val = wa_matnr off = 2 len = 3 ).
  lv_wa_ummat = substring( val = wa_ummat off = 4 len = 3 ).

  IF lv_wa_matnr NE lv_wa_ummat.
    " ... logic ...
  ENDIF.

Before (in WHERE clause):
  SELECT matnr ummat FROM mara INTO TABLE lt_mara WHERE ummat = ls_mara-ummat+2(5).

After:
  DATA lv_ls_ummat TYPE char5.       " Added By PwcYYYY-MM-DD
  lv_ls_ummat = substring( val = ls_mara-ummat off = 2 len = 5 ).

  SELECT matnr ummat FROM mara INTO TABLE lt_mara WHERE ummat = lv_ls_ummat.  " Added By PwcYYYY-MM-DD